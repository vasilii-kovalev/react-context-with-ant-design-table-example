{"version":3,"sources":["components/UsersTable/index.tsx","components/ColorsTable/index.tsx","pages/main/index.tsx","components/Table/index.tsx","components/TableCell/index.ts","components/TableCell/Checkbox/index.tsx","components/TableCell/ColorPreview/index.tsx","components/TableCell/Select/index.tsx"],"names":["userBuilder","build","fields","id","fake","faker","random","uuid","firstName","name","lastName","users","Array","fill","map","columns","title","dataIndex","width","render","user","useUsersTable","checkedKeys","state","dispatch","userId","checkbox","checked","includes","onCheck","toggleCheckedKey","UsersTable","data","useQuery","Promise","resolve","Table","dataSource","pagination","rowKey","colorBuilder","color","internet","colors","tableCells","colorPreview","useColorsTable","colorId","ColorsTable","MainPage","history","useHistory","usersSelectedKeys","colorsSelectedKeys","style","padding","Content","gutter","span","onClick","length","push","notification","open","message","placement","AntDesignTable","onChange","backgroundColor","height","borderRadius","select","otherProps","options","label","value","Option"],"mappings":"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","file":"static/js/7.e471fb9f.chunk.js","sourcesContent":["import { ColumnType } from 'antd/es/table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { Table } from 'components/Table';\nimport { tableCells } from 'components/TableCell';\nimport { useUsersTable, toggleCheckedKey } from 'context/users-table';\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\nconst userBuilder = build<User>('User', {\n  fields: {\n    id: fake(faker => faker.random.uuid()),\n    firstName: fake(faker => faker.name.firstName()),\n    lastName: fake(faker => faker.name.lastName()),\n  },\n});\n\nconst users = new Array(5).fill(null).map(() => userBuilder());\n\nconst columns: ColumnType<User>[] = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n    width: '40%',\n  },\n  {\n    title: 'Last name',\n    dataIndex: 'lastName',\n    width: '40%',\n  },\n  {\n    title: 'Selected',\n    render: function UserCell(user: User) {\n      const {\n        state: { checkedKeys },\n        dispatch,\n      } = useUsersTable();\n      const userId = user.id;\n\n      return (\n        <tableCells.checkbox\n          {...user}\n          dataIndex={userId}\n          checked={checkedKeys.includes(userId)}\n          onCheck={() => toggleCheckedKey(dispatch, userId)}\n        />\n      );\n    },\n  },\n];\n\nconst UsersTable: React.FC = () => {\n  const { data } = useQuery('users', () => Promise.resolve(users));\n\n  return (\n    <Table columns={columns} dataSource={data} pagination={false} rowKey=\"id\" />\n  );\n};\n\nexport { UsersTable };\n\nexport type { User };\n","import { ColumnType } from 'antd/es/table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { Table } from 'components/Table';\nimport { tableCells } from 'components/TableCell';\nimport { useColorsTable, toggleCheckedKey } from 'context/colors-table';\n\ninterface Color {\n  id: string;\n  color: string;\n}\n\nconst colorBuilder = build<Color>('Color', {\n  fields: {\n    id: fake(faker => faker.random.uuid()),\n    color: fake(faker => faker.internet.color()),\n  },\n});\n\nconst colors = new Array(5).fill(null).map(() => colorBuilder());\n\nconst columns: ColumnType<Color>[] = [\n  {\n    title: 'Color HEX',\n    dataIndex: 'color',\n    width: '40%',\n  },\n  {\n    title: 'Preview',\n    width: '40%',\n    render: tableCells.colorPreview,\n  },\n  {\n    title: 'Selected',\n    render: function ColorCell(color: Color) {\n      const {\n        state: { checkedKeys },\n        dispatch,\n      } = useColorsTable();\n      const colorId = color.id;\n\n      return (\n        <tableCells.checkbox\n          {...color}\n          dataIndex={colorId}\n          checked={checkedKeys.includes(colorId)}\n          onCheck={() => toggleCheckedKey(dispatch, colorId)}\n        />\n      );\n    },\n  },\n];\n\nconst ColorsTable: React.FC = () => {\n  const { data } = useQuery('colors', () => Promise.resolve(colors));\n\n  return (\n    <Table columns={columns} dataSource={data} pagination={false} rowKey=\"id\" />\n  );\n};\n\nexport { ColorsTable };\n\nexport type { Color };\n","import Button from 'antd/es/button';\nimport Col from 'antd/es/col';\nimport Layout from 'antd/es/layout';\nimport notification from 'antd/es/notification';\nimport Row from 'antd/es/row';\nimport * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { UsersTable } from 'components/UsersTable';\nimport { ColorsTable } from 'components/ColorsTable';\nimport { useUsersTable } from 'context/users-table';\nimport { useColorsTable } from 'context/colors-table';\n\nconst MainPage: React.FC = () => {\n  const history = useHistory();\n  const {\n    state: { checkedKeys: usersSelectedKeys },\n  } = useUsersTable();\n  const {\n    state: { checkedKeys: colorsSelectedKeys },\n  } = useColorsTable();\n\n  const handleClick = () => {\n    if (!usersSelectedKeys.length) {\n      return notification.open({\n        message: 'Please, select at least one user',\n        placement: 'bottomLeft',\n      });\n    }\n\n    if (!colorsSelectedKeys.length) {\n      return notification.open({\n        message: 'Please, select at least one color',\n        placement: 'bottomLeft',\n      });\n    }\n\n    history.push('/associations');\n  };\n\n  return (\n    <Layout style={{ padding: 8 }}>\n      <Layout.Content>\n        <Row gutter={[16, 16]}>\n          <Col span={12}>\n            <UsersTable />\n          </Col>\n          <Col span={12}>\n            <ColorsTable />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button onClick={handleClick}>Associate</Button>\n          </Col>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport { MainPage };\n\nexport default MainPage;\n","import AntDesignTable from 'antd/es/table';\n\nexport const Table = AntDesignTable;\n","import { TableCellCheckbox } from './Checkbox';\nimport { TableCellColorPreview } from './ColorPreview';\nimport { TableCellSelect } from './Select';\n\nconst tableCells = {\n  checkbox: TableCellCheckbox,\n  colorPreview: TableCellColorPreview,\n  select: TableCellSelect,\n};\n\nexport { tableCells };\n","import Checkbox, { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport * as React from 'react';\n\ninterface TableCellCheckboxProps {\n  dataIndex: string | number;\n  checked?: boolean;\n  onCheck?: (event: CheckboxChangeEvent) => void;\n}\n\nconst TableCellCheckbox: React.FC<TableCellCheckboxProps> = ({\n  dataIndex,\n  checked,\n  onCheck,\n}) => <Checkbox key={dataIndex} checked={checked} onChange={onCheck} />;\n\nexport { TableCellCheckbox };\n\nexport type { TableCellCheckboxProps };\n","import * as React from 'react';\n\ninterface TableCellColorPreviewProps {\n  color: string;\n}\n\nconst TableCellColorPreview: React.FC<TableCellColorPreviewProps> = ({\n  color,\n}) => (\n  <div\n    key={color}\n    style={{\n      backgroundColor: color,\n      width: 16,\n      height: 16,\n      borderRadius: 2,\n    }}\n  />\n);\n\nexport { TableCellColorPreview };\n\nexport type { TableCellColorPreviewProps };\n","import Select from 'antd/es/select';\nimport * as React from 'react';\n\ninterface SelectOption {\n  label: string;\n  value: string | number;\n}\n\ninterface TableCellSelectProps {\n  data: SelectOption[];\n}\n\nconst TableCellSelect: React.FC<TableCellSelectProps> = ({\n  data,\n  ...otherProps\n}) => {\n  const options = data.map(({ label, value }) => (\n    <Select.Option key={value} value={value}>\n      {label}\n    </Select.Option>\n  ));\n\n  return <Select {...otherProps}>{options}</Select>;\n};\n\nexport { TableCellSelect };\n\nexport type { TableCellSelectProps };\n"],"sourceRoot":""}