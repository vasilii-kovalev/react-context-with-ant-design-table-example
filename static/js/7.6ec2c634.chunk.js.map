{"version":3,"sources":["components/UsersTable/index.tsx","components/ColorsTable/index.tsx","pages/main/index.tsx","components/Table/index.tsx","components/TableCell/index.ts","components/TableCell/Checkbox/index.tsx","components/TableCell/ColorPreview/index.tsx","components/TableCell/Select/index.tsx"],"names":["userBuilder","build","fields","id","fake","faker","random","uuid","firstName","name","lastName","users","Array","fill","map","columns","title","dataIndex","width","render","Component","MemoizedComponent","React","user","useUsersTable","checkedKeys","state","dispatch","userId","checked","includes","handleCheck","toggleCheckedKey","onCheck","withSelectedUser","tableCells","checkbox","UsersTable","data","useQuery","Promise","resolve","Table","dataSource","pagination","rowKey","colorBuilder","color","internet","colors","colorPreview","useColorsTable","colorId","withSelectedColor","ColorsTable","layoutStyle","padding","rowGutter","MainPage","history","useHistory","usersSelectedKeys","colorsSelectedKeys","isAnyUserSelected","length","isAnyColorSelected","handleClick","push","notification","open","message","placement","style","Content","gutter","span","onClick","TableInner","props","onChange","backgroundColor","height","borderRadius","select","otherProps","options","label","value","Option"],"mappings":"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","file":"static/js/7.6ec2c634.chunk.js","sourcesContent":["import { ColumnType } from 'antd/es/table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { Table } from '../Table';\nimport { tableCells } from '../TableCell';\nimport { useUsersTable, toggleCheckedKey } from 'context/users-table';\nimport { TableCellCheckboxProps } from 'components/TableCell/Checkbox';\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n}\n\nconst userBuilder = build<User>('User', {\n  fields: {\n    id: fake(faker => faker.random.uuid()),\n    firstName: fake(faker => faker.name.firstName()),\n    lastName: fake(faker => faker.name.lastName()),\n  },\n});\n\nconst users = new Array(5).fill(null).map(() => userBuilder());\n\nconst withSelectedUser = (Component: React.FC<TableCellCheckboxProps>) => {\n  const MemoizedComponent = React.memo(Component);\n\n  return function UserCell(user: User) {\n    const {\n      state: { checkedKeys },\n      dispatch,\n    } = useUsersTable();\n    const userId = user.id;\n\n    const checked = checkedKeys.includes(userId);\n    const handleCheck = React.useCallback(\n      () => toggleCheckedKey(dispatch, userId),\n      [dispatch, userId]\n    );\n\n    return (\n      <MemoizedComponent\n        {...user}\n        dataIndex={userId}\n        checked={checked}\n        onCheck={handleCheck}\n      />\n    );\n  };\n};\n\nconst columns: ColumnType<User>[] = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n    width: '40%',\n  },\n  {\n    title: 'Last name',\n    dataIndex: 'lastName',\n    width: '40%',\n  },\n  {\n    title: 'Selected',\n    render: withSelectedUser(tableCells.checkbox),\n  },\n];\n\nconst UsersTable: React.FC = () => {\n  const { data } = useQuery('users', () => Promise.resolve(users));\n\n  return (\n    <Table columns={columns} dataSource={data} pagination={false} rowKey=\"id\" />\n  );\n};\n\nexport { UsersTable };\n\nexport type { User };\n","import { ColumnType } from 'antd/es/table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { build, fake } from '@jackfranklin/test-data-bot';\nimport { Table } from '../Table';\nimport { tableCells } from '../TableCell';\nimport { useColorsTable, toggleCheckedKey } from 'context/colors-table';\nimport { TableCellCheckboxProps } from 'components/TableCell/Checkbox';\n\ninterface Color {\n  id: string;\n  color: string;\n}\n\nconst colorBuilder = build<Color>('Color', {\n  fields: {\n    id: fake(faker => faker.random.uuid()),\n    color: fake(faker => faker.internet.color()),\n  },\n});\n\nconst colors = new Array(5).fill(null).map(() => colorBuilder());\n\nconst withSelectedColor = (Component: React.FC<TableCellCheckboxProps>) => {\n  const MemoizedComponent = React.memo(Component);\n\n  return function ColorCell(color: Color) {\n    const {\n      state: { checkedKeys },\n      dispatch,\n    } = useColorsTable();\n    const colorId = color.id;\n\n    const checked = checkedKeys.includes(colorId);\n    const handleCheck = React.useCallback(\n      () => toggleCheckedKey(dispatch, colorId),\n      [dispatch, colorId]\n    );\n\n    return (\n      <MemoizedComponent\n        {...color}\n        dataIndex={colorId}\n        checked={checked}\n        onCheck={handleCheck}\n      />\n    );\n  };\n};\n\nconst columns: ColumnType<Color>[] = [\n  {\n    title: 'Color HEX',\n    dataIndex: 'color',\n    width: '40%',\n  },\n  {\n    title: 'Preview',\n    width: '40%',\n    render: tableCells.colorPreview,\n  },\n  {\n    title: 'Selected',\n    render: withSelectedColor(tableCells.checkbox),\n  },\n];\n\nconst ColorsTable: React.FC = () => {\n  const { data } = useQuery('colors', () => Promise.resolve(colors));\n\n  return (\n    <Table columns={columns} dataSource={data} pagination={false} rowKey=\"id\" />\n  );\n};\n\nexport { ColorsTable };\n\nexport type { Color };\n","import Button from 'antd/es/button';\nimport Col, { ColProps } from 'antd/es/col';\nimport Layout from 'antd/es/layout';\nimport notification from 'antd/es/notification';\nimport Row, { RowProps } from 'antd/es/row';\nimport * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { UsersTable } from 'components/UsersTable';\nimport { ColorsTable } from 'components/ColorsTable';\nimport { useUsersTable } from 'context/users-table';\nimport { useColorsTable } from 'context/colors-table';\n\nconst layoutStyle: React.CSSProperties = { padding: 8 };\nconst rowGutter: RowProps['gutter'] = [16, 16];\nconst colSpan: ColProps['span'] = 12;\n\nconst MainPage: React.FC = () => {\n  const history = useHistory();\n  const {\n    state: { checkedKeys: usersSelectedKeys },\n  } = useUsersTable();\n  const {\n    state: { checkedKeys: colorsSelectedKeys },\n  } = useColorsTable();\n  const isAnyUserSelected = usersSelectedKeys.length > 0;\n  const isAnyColorSelected = colorsSelectedKeys.length > 0;\n\n  const handleClick = React.useCallback(() => {\n    if (!isAnyUserSelected) {\n      return notification.open({\n        message: 'Please, select at least one user',\n        placement: 'bottomLeft',\n      });\n    }\n\n    if (!isAnyColorSelected) {\n      return notification.open({\n        message: 'Please, select at least one color',\n        placement: 'bottomLeft',\n      });\n    }\n\n    history.push('/associations');\n  }, [isAnyUserSelected, isAnyColorSelected, history]);\n\n  return (\n    <Layout style={layoutStyle}>\n      <Layout.Content>\n        <Row gutter={rowGutter}>\n          <Col span={colSpan}>\n            <UsersTable />\n          </Col>\n          <Col span={colSpan}>\n            <ColorsTable />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button onClick={handleClick}>Associate</Button>\n          </Col>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport { MainPage };\n\nexport default MainPage;\n","import AntDesignTable, { TableProps } from 'antd/es/table';\nimport * as React from 'react';\n\nconst TableInner = <RecordType extends object = any>(\n  props: TableProps<RecordType>\n) => <AntDesignTable {...props} />;\n\n// React.memo doesn't work correctly with generics\n// Solution: https://stackoverflow.com/a/60170425/11293963\nexport const Table = React.memo(TableInner) as typeof TableInner;\n","import { TableCellCheckbox } from './Checkbox';\nimport { TableCellColorPreview } from './ColorPreview';\nimport { TableCellSelect } from './Select';\n\nconst tableCells = {\n  checkbox: TableCellCheckbox,\n  colorPreview: TableCellColorPreview,\n  select: TableCellSelect,\n};\n\nexport { tableCells };\n","import Checkbox, { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport * as React from 'react';\n\ninterface TableCellCheckboxProps {\n  dataIndex: string | number;\n  checked?: boolean;\n  onCheck?: (event: CheckboxChangeEvent) => void;\n}\n\nconst TableCellCheckbox: React.FC<TableCellCheckboxProps> = ({\n  dataIndex,\n  checked,\n  onCheck,\n}) => <Checkbox key={dataIndex} checked={checked} onChange={onCheck} />;\n\nexport { TableCellCheckbox };\n\nexport type { TableCellCheckboxProps };\n","import * as React from 'react';\n\ninterface TableCellColorPreviewProps {\n  color?: string;\n}\n\nconst TableCellColorPreview: React.FC<TableCellColorPreviewProps> = ({\n  color,\n}) => {\n  if (!color) {\n    return null;\n  }\n\n  return (\n    <div\n      key={color}\n      style={{\n        backgroundColor: color,\n        width: 16,\n        height: 16,\n        borderRadius: 2,\n      }}\n    />\n  );\n};\n\nexport { TableCellColorPreview };\n\nexport type { TableCellColorPreviewProps };\n","import Select from 'antd/es/select';\nimport * as React from 'react';\n\ninterface SelectOption {\n  label: string;\n  value: string | number;\n}\n\ninterface TableCellSelectProps {\n  data: SelectOption[];\n}\n\nconst TableCellSelect: React.FC<TableCellSelectProps> = ({\n  data,\n  ...otherProps\n}) => {\n  const options = data.map(({ label, value }) => (\n    <Select.Option key={value} value={value}>\n      {label}\n    </Select.Option>\n  ));\n\n  return <Select {...otherProps}>{options}</Select>;\n};\n\nexport { TableCellSelect };\n\nexport type { TableCellSelectProps };\n"],"sourceRoot":""}