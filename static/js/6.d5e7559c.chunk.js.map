{"version":3,"sources":["components/AssociationsTable/index.tsx","pages/associations/index.tsx","components/Table/index.tsx","components/TableCell/index.ts","components/TableCell/Checkbox/index.tsx","components/TableCell/ColorPreview/index.tsx","components/TableCell/Select/index.tsx"],"names":["columns","title","dataIndex","width","render","value","record","index","Item","name","Component","MemoizedComponent","React","checkedKeys","useColorsTable","state","useQuery","data","colors","colorsOptions","filter","id","includes","map","color","label","withColorSelect","tableCells","select","otherProps","withColorPreview","colorPreview","AssociationsTable","form","useUsersTable","users","firstName","undefined","initialValues","associations","Table","dataSource","pagination","rowKey","AssociationsBlock","style","whiteSpace","padding","JSON","stringify","layoutStyle","rowGutter","AssociationsPage","Form","useForm","setAssociations","handleSubmit","getFieldsValue","every","Boolean","notification","open","message","placement","Content","gutter","span","onClick","to","TableInner","props","checkbox","checked","onCheck","onChange","backgroundColor","height","borderRadius","options","Option"],"mappings":"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","file":"static/js/6.d5e7559c.chunk.js","sourcesContent":["import { ColumnType } from 'antd/es/table';\nimport Form, { FormInstance } from 'antd/es/form';\nimport { Table } from '../Table';\nimport { tableCells } from '../TableCell';\nimport { useColorsTable } from 'context/colors-table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { User } from '../UsersTable';\nimport { Color } from '../ColorsTable';\nimport { useUsersTable } from 'context/users-table';\nimport { AssociationsFormValues } from 'pages/associations';\nimport { TableCellColorPreviewProps } from 'components/TableCell/ColorPreview';\nimport { TableCellSelectProps } from 'components/TableCell/Select';\n\ninterface Association {\n  id: string;\n  firstName: string;\n  color?: string;\n}\n\nconst withColorPreview = (Component: React.FC<TableCellColorPreviewProps>) => {\n  const MemoizedComponent = React.memo<{ value?: Association['color'] }>(\n    ({ value, ...otherProps }) => <Component color={value} {...otherProps} />\n  );\n\n  return function AssociationColorPreview(\n    value: Association,\n    record: Association,\n    index: number\n  ) {\n    return (\n      // Here we just spy on this value\n      <Form.Item name={['associations', index, 'color']} key={value.id}>\n        <MemoizedComponent />\n      </Form.Item>\n    );\n  };\n};\n\nconst withColorSelect = (Component: React.FC<TableCellSelectProps>) => {\n  const MemoizedComponent = React.memo(Component);\n\n  return function ColorFormItem(\n    value: Association,\n    record: Association,\n    index: number\n  ) {\n    const {\n      state: { checkedKeys },\n    } = useColorsTable();\n    const { data: colors = [] } = useQuery<Color[]>('colors');\n    const colorsOptions = React.useMemo(\n      () =>\n        colors\n          .filter(({ id }) => checkedKeys.includes(id))\n          .map(({ color }) => ({\n            label: color,\n            value: color,\n          })),\n      [checkedKeys, colors]\n    );\n\n    return (\n      <Form.Item name={['associations', index, 'color']} key={value.id}>\n        <MemoizedComponent data={colorsOptions} />\n      </Form.Item>\n    );\n  };\n};\n\nconst columns: ColumnType<Association>[] = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n    width: '40%',\n    render: (value: User['firstName'], record, index) => (\n      <Form.Item name={['associations', index, 'firstName']}>\n        <span>{value}</span>\n      </Form.Item>\n    ),\n  },\n  {\n    title: 'Color',\n    width: '40%',\n    render: withColorSelect(tableCells.select),\n  },\n  {\n    title: 'Preview',\n    render: withColorPreview(tableCells.colorPreview),\n  },\n];\n\ninterface AssociationsTableProps {\n  form: FormInstance<AssociationsFormValues>;\n}\n\nconst AssociationsTable: React.FC<AssociationsTableProps> = ({ form }) => {\n  const {\n    state: { checkedKeys },\n  } = useUsersTable();\n  const { data: users = [] } = useQuery<User[]>('users');\n  const data = React.useMemo(\n    () =>\n      users\n        .filter(({ id }) => checkedKeys.includes(id))\n        .map(\n          ({ firstName, id }): Association => ({\n            id,\n            firstName,\n            color: undefined,\n          })\n        ),\n    [checkedKeys, users]\n  );\n\n  return (\n    <Form form={form} initialValues={{ associations: data }}>\n      <Table\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n        rowKey=\"id\"\n      />\n    </Form>\n  );\n};\n\nexport { AssociationsTable };\n\nexport type { Association };\n","import Button from 'antd/es/button';\nimport Col from 'antd/es/col';\nimport Form from 'antd/es/form';\nimport Layout from 'antd/es/layout';\nimport notification from 'antd/es/notification';\nimport Row, { RowProps } from 'antd/es/row';\nimport Space from 'antd/es/space';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AssociationsTable, Association } from 'components/AssociationsTable';\n\ntype Associations = Association[] | null;\n\ninterface AssociationsProps {\n  associations: Associations;\n}\n\ninterface AssociationsFormValues {\n  associations: Association[];\n}\n\nconst AssociationsBlock: React.FC<AssociationsProps> = ({ associations }) => {\n  if (!associations) {\n    return null;\n  }\n\n  return (\n    <code style={{ whiteSpace: 'pre-wrap', padding: 8 }}>\n      {JSON.stringify(associations, null, 2)}\n    </code>\n  );\n};\n\nconst layoutStyle: React.CSSProperties = { padding: 8 };\nconst rowGutter: RowProps['gutter'] = [16, 16];\n\nconst AssociationsPage: React.FC = () => {\n  const [form] = Form.useForm<AssociationsFormValues>();\n  const [associations, setAssociations] = React.useState<Associations>(null);\n\n  const handleSubmit = React.useCallback(() => {\n    const { associations } = form.getFieldsValue();\n\n    const areAllColorsAssociated = associations\n      .map(({ color }) => color)\n      .every(Boolean);\n\n    if (!areAllColorsAssociated) {\n      return notification.open({\n        message: 'Please, associate all the user-color pairs',\n        placement: 'bottomLeft',\n      });\n    }\n\n    setAssociations(associations);\n  }, [form]);\n\n  return (\n    <Layout style={layoutStyle}>\n      <Layout.Content>\n        <Row gutter={rowGutter}>\n          <Col span={24}>\n            <AssociationsTable form={form} />\n          </Col>\n        </Row>\n        <Row gutter={rowGutter}>\n          <Col>\n            <Space>\n              <Button onClick={handleSubmit}>Submit</Button>\n              <Link to=\"/\">Back to Main page</Link>\n            </Space>\n          </Col>\n        </Row>\n        <Row gutter={rowGutter}>\n          <AssociationsBlock associations={associations} />\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport { AssociationsPage };\n\nexport type { Associations, AssociationsProps, AssociationsFormValues };\n\nexport default AssociationsPage;\n","import AntDesignTable, { TableProps } from 'antd/es/table';\nimport * as React from 'react';\n\nconst TableInner = <RecordType extends object = any>(\n  props: TableProps<RecordType>\n) => <AntDesignTable {...props} />;\n\n// React.memo doesn't work correctly with generics\n// Solution: https://stackoverflow.com/a/60170425/11293963\nexport const Table = React.memo(TableInner) as typeof TableInner;\n","import { TableCellCheckbox } from './Checkbox';\nimport { TableCellColorPreview } from './ColorPreview';\nimport { TableCellSelect } from './Select';\n\nconst tableCells = {\n  checkbox: TableCellCheckbox,\n  colorPreview: TableCellColorPreview,\n  select: TableCellSelect,\n};\n\nexport { tableCells };\n","import Checkbox, { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport * as React from 'react';\n\ninterface TableCellCheckboxProps {\n  dataIndex: string | number;\n  checked?: boolean;\n  onCheck?: (event: CheckboxChangeEvent) => void;\n}\n\nconst TableCellCheckbox: React.FC<TableCellCheckboxProps> = ({\n  dataIndex,\n  checked,\n  onCheck,\n}) => <Checkbox key={dataIndex} checked={checked} onChange={onCheck} />;\n\nexport { TableCellCheckbox };\n\nexport type { TableCellCheckboxProps };\n","import * as React from 'react';\n\ninterface TableCellColorPreviewProps {\n  color?: string;\n}\n\nconst TableCellColorPreview: React.FC<TableCellColorPreviewProps> = ({\n  color,\n}) => {\n  if (!color) {\n    return null;\n  }\n\n  return (\n    <div\n      key={color}\n      style={{\n        backgroundColor: color,\n        width: 16,\n        height: 16,\n        borderRadius: 2,\n      }}\n    />\n  );\n};\n\nexport { TableCellColorPreview };\n\nexport type { TableCellColorPreviewProps };\n","import Select from 'antd/es/select';\nimport * as React from 'react';\n\ninterface SelectOption {\n  label: string;\n  value: string | number;\n}\n\ninterface TableCellSelectProps {\n  data: SelectOption[];\n}\n\nconst TableCellSelect: React.FC<TableCellSelectProps> = ({\n  data,\n  ...otherProps\n}) => {\n  const options = data.map(({ label, value }) => (\n    <Select.Option key={value} value={value}>\n      {label}\n    </Select.Option>\n  ));\n\n  return <Select {...otherProps}>{options}</Select>;\n};\n\nexport { TableCellSelect };\n\nexport type { TableCellSelectProps };\n"],"sourceRoot":""}