{"version":3,"sources":["context/users-table.tsx","context/colors-table.tsx","reportWebVitals.ts","app.tsx","index.tsx"],"names":["actionTypes","defaultInitialValue","checkedKeys","defaultReducer","state","action","type","checkedKey","includes","filter","key","concat","Error","UsersTableContext","React","dispatch","UsersTableProvider","initialValue","reducer","children","value","Provider","useUsersTable","usersTable","undefined","toggleCheckedKey","ColorsTableContext","ColorsTableProvider","useColorsTable","colorsTable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MainPage","AssociationsPage","queryConfig","queries","useErrorBoundary","refetchOnWindowFocus","App","config","basename","process","fallback","exact","path","initialIsOpen","ReactDOM","render","document","getElementById"],"mappings":"wTAQMA,EACc,qBAmBdC,EAAuC,CAC3CC,YAAa,IAGTC,EAAoC,SAACC,EAAOC,GAChD,OAAQA,EAAOC,MACb,KAAKN,EAA+B,IAC1BO,EAAeF,EAAfE,WACAL,EAAgBE,EAAhBF,YAER,OAAIA,EAAYM,SAASD,GAChB,2BACFH,GADL,IAEEF,YAAaA,EAAYO,QAAO,SAAAC,GAAG,OAAIA,IAAQH,OAI5C,2BACFH,GADL,IAEEF,YAAaA,EAAYS,OAAOJ,KAIpC,QACE,MAAM,IAAIK,MAAJ,+BAAkCP,EAAOC,SAK/CO,EAAoBC,gBAGvB,CACDV,MAAOH,EACPc,SAAU,eAGNC,EAAwD,SAAC,GAIxD,IAAD,IAHJC,oBAGI,MAHWhB,EAGX,MAFJiB,eAEI,MAFMf,EAEN,EADJgB,EACI,EADJA,SACI,EACsBL,aACxBI,EACAD,GAHE,mBACGb,EADH,KACUW,EADV,KAMEK,EAAQN,WACZ,iBAAO,CACLV,QACAW,cAEF,CAACX,EAAOW,IAGV,OACE,cAACF,EAAkBQ,SAAnB,CAA4BD,MAAOA,EAAnC,SACGD,KAKDG,EAAgB,WACpB,IAAMC,EAAaT,aAAiBD,GAEpC,QAAmBW,IAAfD,EACF,MAAM,IAAIX,MAAJ,0DAGR,OAAOW,GAGHE,EAAmB,SACvBV,EACAR,GAFuB,OAGpBQ,EAAS,CAAET,KAAMN,EAA8BO,iB,uKC/F9CP,EACc,qBAmBdC,EAAwC,CAC5CC,YAAa,IAGTC,EAAqC,SAACC,EAAOC,GACjD,OAAQA,EAAOC,MACb,KAAKN,EAA+B,IAC1BO,EAAeF,EAAfE,WACAL,EAAgBE,EAAhBF,YAER,OAAIA,EAAYM,SAASD,GAChB,2BACFH,GADL,IAEEF,YAAaA,EAAYO,QAAO,SAAAC,GAAG,OAAIA,IAAQH,OAI5C,2BACFH,GADL,IAEEF,YAAaA,EAAYS,OAAOJ,KAIpC,QACE,MAAM,IAAIK,MAAJ,+BAAkCP,EAAOC,SAK/CoB,EAAqBZ,gBAGxB,CACDV,MAAOH,EACPc,SAAU,eAGNY,EAA0D,SAAC,GAI1D,IAAD,IAHJV,oBAGI,MAHWhB,EAGX,MAFJiB,eAEI,MAFMf,EAEN,EADJgB,EACI,EADJA,SACI,EACsBL,aACxBI,EACAD,GAHE,mBACGb,EADH,KACUW,EADV,KAMEK,EAAQN,WACZ,iBAAO,CACLV,QACAW,cAEF,CAACX,EAAOW,IAGV,OACE,cAACW,EAAmBL,SAApB,CAA6BD,MAAOA,EAApC,SACGD,KAKDS,EAAiB,WACrB,IAAMC,EAAcf,aAAiBY,GAErC,QAAoBF,IAAhBK,EACF,MAAM,IAAIjB,MAAJ,4DAGR,OAAOiB,GAGHJ,EAAmB,SACvBV,EACAR,GAFuB,OAGpBQ,EAAS,CAAET,KAAMN,EAA8BO,iB,0ECzFrCuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+CCFRQ,EAAWzB,QAAW,kBAAM,+DAC5B0B,EAAmB1B,QAAW,kBAAM,+DAEpC2B,EAAgC,CACpCC,QAAS,CACPC,kBAAkB,EAClBC,sBAAsB,IAIpBC,EAAM,WACV,OACE,qCACE,cAAC,IAAD,CAA0BC,OAAQL,EAAlC,SACE,cAAC,IAAD,CAAQM,SAAUC,+CAAlB,SACE,cAAC,WAAD,CAAgBC,SAAU,KAA1B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAACZ,EAAD,MAEF,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,gBAAlB,SACE,cAACX,EAAD,mBAQd,cAAC,qBAAD,CAAoBY,eAAe,Q,MChCzCC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1B,M","file":"static/js/main.038a7830.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype CheckedKey = string;\n\ninterface UsersTableState {\n  checkedKeys: CheckedKey[];\n}\n\nconst actionTypes = {\n  toggleCheckedKey: 'TOGGLE_CHECKED_KEY',\n} as const;\n\ninterface ToggleCheckedKey {\n  type: typeof actionTypes.toggleCheckedKey;\n  checkedKey: CheckedKey;\n}\n\ntype UsersTableAction = ToggleCheckedKey;\n\ntype UsersTablesDispatch = React.Dispatch<UsersTableAction>;\n\ntype UsersTableReducer = React.Reducer<UsersTableState, UsersTableAction>;\n\ninterface UsersTableProviderProps {\n  initialValue?: UsersTableState;\n  reducer?: UsersTableReducer;\n}\n\nconst defaultInitialValue: UsersTableState = {\n  checkedKeys: [],\n};\n\nconst defaultReducer: UsersTableReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.toggleCheckedKey: {\n      const { checkedKey } = action;\n      const { checkedKeys } = state;\n\n      if (checkedKeys.includes(checkedKey)) {\n        return {\n          ...state,\n          checkedKeys: checkedKeys.filter(key => key !== checkedKey),\n        };\n      }\n\n      return {\n        ...state,\n        checkedKeys: checkedKeys.concat(checkedKey),\n      };\n    }\n\n    default: {\n      throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n};\n\nconst UsersTableContext = React.createContext<{\n  state: UsersTableState;\n  dispatch: React.Dispatch<UsersTableAction>;\n}>({\n  state: defaultInitialValue,\n  dispatch: () => {},\n});\n\nconst UsersTableProvider: React.FC<UsersTableProviderProps> = ({\n  initialValue = defaultInitialValue,\n  reducer = defaultReducer,\n  children,\n}) => {\n  const [state, dispatch] = React.useReducer<UsersTableReducer>(\n    reducer,\n    initialValue\n  );\n\n  const value = React.useMemo(\n    () => ({\n      state,\n      dispatch,\n    }),\n    [state, dispatch]\n  );\n\n  return (\n    <UsersTableContext.Provider value={value}>\n      {children}\n    </UsersTableContext.Provider>\n  );\n};\n\nconst useUsersTable = () => {\n  const usersTable = React.useContext(UsersTableContext);\n\n  if (usersTable === undefined) {\n    throw new Error(`useUsersTable must be used within a UsersTableProvider`);\n  }\n\n  return usersTable;\n};\n\nconst toggleCheckedKey = (\n  dispatch: UsersTablesDispatch,\n  checkedKey: CheckedKey\n) => dispatch({ type: actionTypes.toggleCheckedKey, checkedKey });\n\nexport { UsersTableProvider, useUsersTable, toggleCheckedKey };\n","import * as React from 'react';\n\ntype CheckedKey = string;\n\ninterface ColorsTableState {\n  checkedKeys: CheckedKey[];\n}\n\nconst actionTypes = {\n  toggleCheckedKey: 'TOGGLE_CHECKED_KEY',\n} as const;\n\ninterface ToggleCheckedKey {\n  type: typeof actionTypes.toggleCheckedKey;\n  checkedKey: CheckedKey;\n}\n\ntype ColorsTableAction = ToggleCheckedKey;\n\ntype ColorsTablesDispatch = React.Dispatch<ColorsTableAction>;\n\ntype ColorsTableReducer = React.Reducer<ColorsTableState, ColorsTableAction>;\n\ninterface ColorsTableProviderProps {\n  initialValue?: ColorsTableState;\n  reducer?: ColorsTableReducer;\n}\n\nconst defaultInitialValue: ColorsTableState = {\n  checkedKeys: [],\n};\n\nconst defaultReducer: ColorsTableReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.toggleCheckedKey: {\n      const { checkedKey } = action;\n      const { checkedKeys } = state;\n\n      if (checkedKeys.includes(checkedKey)) {\n        return {\n          ...state,\n          checkedKeys: checkedKeys.filter(key => key !== checkedKey),\n        };\n      }\n\n      return {\n        ...state,\n        checkedKeys: checkedKeys.concat(checkedKey),\n      };\n    }\n\n    default: {\n      throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n};\n\nconst ColorsTableContext = React.createContext<{\n  state: ColorsTableState;\n  dispatch: React.Dispatch<ColorsTableAction>;\n}>({\n  state: defaultInitialValue,\n  dispatch: () => {},\n});\n\nconst ColorsTableProvider: React.FC<ColorsTableProviderProps> = ({\n  initialValue = defaultInitialValue,\n  reducer = defaultReducer,\n  children,\n}) => {\n  const [state, dispatch] = React.useReducer<ColorsTableReducer>(\n    reducer,\n    initialValue\n  );\n\n  const value = React.useMemo(\n    () => ({\n      state,\n      dispatch,\n    }),\n    [state, dispatch]\n  );\n\n  return (\n    <ColorsTableContext.Provider value={value}>\n      {children}\n    </ColorsTableContext.Provider>\n  );\n};\n\nconst useColorsTable = () => {\n  const colorsTable = React.useContext(ColorsTableContext);\n\n  if (colorsTable === undefined) {\n    throw new Error(`useColorsTable must be used within a ColorsTableProvider`);\n  }\n\n  return colorsTable;\n};\n\nconst toggleCheckedKey = (\n  dispatch: ColorsTablesDispatch,\n  checkedKey: CheckedKey\n) => dispatch({ type: actionTypes.toggleCheckedKey, checkedKey });\n\nexport { ColorsTableProvider, useColorsTable, toggleCheckedKey };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ReactQueryConfigProvider, ReactQueryConfig } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query-devtools';\nimport { UsersTableProvider } from './context/users-table';\nimport { ColorsTableProvider } from './context/colors-table';\n\nconst MainPage = React.lazy(() => import('./pages/main'));\nconst AssociationsPage = React.lazy(() => import('./pages/associations'));\n\nconst queryConfig: ReactQueryConfig = {\n  queries: {\n    useErrorBoundary: true,\n    refetchOnWindowFocus: false,\n  },\n};\n\nconst App = () => {\n  return (\n    <>\n      <ReactQueryConfigProvider config={queryConfig}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <React.Suspense fallback={null}>\n            <Switch>\n              <UsersTableProvider>\n                <ColorsTableProvider>\n                  <Route exact path=\"/\">\n                    <MainPage />\n                  </Route>\n                  <Route exact path=\"/associations\">\n                    <AssociationsPage />\n                  </Route>\n                </ColorsTableProvider>\n              </UsersTableProvider>\n            </Switch>\n          </React.Suspense>\n        </Router>\n      </ReactQueryConfigProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n};\n\nexport { App };\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}