{"version":3,"sources":["components/AssociationsTable/index.tsx","pages/associations/index.tsx","components/Table/index.tsx","components/TableCell/index.ts","components/TableCell/Checkbox/index.tsx","components/TableCell/ColorPreview/index.tsx","components/TableCell/Select/index.tsx"],"names":["columns","title","dataIndex","width","render","value","record","index","Item","name","checkedKeys","useColorsTable","state","useQuery","data","colorsOptions","filter","id","includes","map","color","label","select","shouldUpdate","getFieldValue","colorPreview","AssociationsTable","form","useUsersTable","firstName","undefined","initialValues","associations","Table","dataSource","pagination","rowKey","AssociationsPage","Form","useForm","React","setAssociations","style","padding","Content","gutter","span","onClick","getFieldsValue","every","Boolean","notification","open","message","placement","to","whiteSpace","JSON","stringify","AntDesignTable","tableCells","checkbox","checked","onCheck","onChange","backgroundColor","height","borderRadius","otherProps","options","Option"],"mappings":"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","file":"static/js/6.6af3e86e.chunk.js","sourcesContent":["import { ColumnType } from 'antd/es/table';\nimport Form, { FormInstance } from 'antd/es/form';\nimport { Table } from 'components/Table';\nimport { tableCells } from 'components/TableCell';\nimport { useColorsTable } from 'context/colors-table';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { User } from 'components/UsersTable';\nimport { Color } from 'components/ColorsTable';\nimport { useUsersTable } from 'context/users-table';\n\ninterface Association {\n  id: string;\n  firstName: string;\n  color?: string;\n}\n\nconst columns: ColumnType<Association>[] = [\n  {\n    title: 'First name',\n    dataIndex: 'firstName',\n    width: '40%',\n    render: (value: User['firstName'], record, index) => (\n      <Form.Item name={['associations', index, 'firstName']}>\n        <span>{value}</span>\n      </Form.Item>\n    ),\n  },\n  {\n    title: 'Color',\n    width: '40%',\n    render: function ColorFormItem(value: Association, record, index) {\n      const {\n        state: { checkedKeys },\n      } = useColorsTable();\n      const { data: colors = [] } = useQuery<Color[]>('colors');\n      const colorsOptions = colors\n        .filter(({ id }) => checkedKeys.includes(id))\n        .map(({ color }) => ({\n          label: color,\n          value: color,\n        }));\n\n      return (\n        <Form.Item name={['associations', index, 'color']}>\n          <tableCells.select data={colorsOptions} />\n        </Form.Item>\n      );\n    },\n  },\n  {\n    title: 'Preview',\n    render: (value: Association, record, index) => (\n      <Form.Item shouldUpdate>\n        {({ getFieldValue }) => (\n          <tableCells.colorPreview\n            color={getFieldValue(['associations', index, 'color'])}\n          />\n        )}\n      </Form.Item>\n    ),\n  },\n];\n\ninterface AssociationsTableProps {\n  form: FormInstance;\n}\n\nconst AssociationsTable: React.FC<AssociationsTableProps> = ({ form }) => {\n  const {\n    state: { checkedKeys },\n  } = useUsersTable();\n  const { data: users = [] } = useQuery<User[]>('users');\n\n  const data = users\n    .filter(({ id }) => checkedKeys.includes(id))\n    .map(\n      ({ firstName, id }): Association => ({\n        id,\n        firstName,\n        color: undefined,\n      })\n    );\n\n  return (\n    <Form form={form} initialValues={{ associations: data }}>\n      <Table\n        columns={columns}\n        dataSource={data}\n        pagination={false}\n        rowKey=\"id\"\n      />\n    </Form>\n  );\n};\n\nexport { AssociationsTable };\n\nexport type { Association };\n","import Button from 'antd/es/button';\nimport Col from 'antd/es/col';\nimport Form from 'antd/es/form';\nimport Layout from 'antd/es/layout';\nimport notification from 'antd/es/notification';\nimport Row from 'antd/es/row';\nimport Space from 'antd/es/space';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AssociationsTable, Association } from 'components/AssociationsTable';\n\nconst AssociationsPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [associations, setAssociations] = React.useState<Association[] | null>(\n    null\n  );\n\n  const handleSubmit = () => {\n    const associations: Association[] = form.getFieldsValue().associations;\n\n    const areAllColorsAssociated = associations\n      .map(({ color }) => color)\n      .every(Boolean);\n\n    if (!areAllColorsAssociated) {\n      return notification.open({\n        message: 'Please, associate all the user-color pairs',\n        placement: 'bottomLeft',\n      });\n    }\n\n    setAssociations(associations);\n  };\n\n  return (\n    <Layout style={{ padding: 8 }}>\n      <Layout.Content>\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <AssociationsTable form={form} />\n          </Col>\n        </Row>\n        <Row gutter={[16, 16]}>\n          <Col>\n            <Space>\n              <Button onClick={handleSubmit}>Submit</Button>\n              <Link to=\"/\">Back to Main page</Link>\n            </Space>\n          </Col>\n        </Row>\n        <Row gutter={[16, 16]}>\n          {!associations ? null : (\n            <code style={{ whiteSpace: 'pre-wrap', padding: 8 }}>\n              {JSON.stringify(associations, null, 2)}\n            </code>\n          )}\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport { AssociationsPage };\n\nexport default AssociationsPage;\n","import AntDesignTable from 'antd/es/table';\n\nexport const Table = AntDesignTable;\n","import { TableCellCheckbox } from './Checkbox';\nimport { TableCellColorPreview } from './ColorPreview';\nimport { TableCellSelect } from './Select';\n\nconst tableCells = {\n  checkbox: TableCellCheckbox,\n  colorPreview: TableCellColorPreview,\n  select: TableCellSelect,\n};\n\nexport { tableCells };\n","import Checkbox, { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport * as React from 'react';\n\ninterface TableCellCheckboxProps {\n  dataIndex: string | number;\n  checked?: boolean;\n  onCheck?: (event: CheckboxChangeEvent) => void;\n}\n\nconst TableCellCheckbox: React.FC<TableCellCheckboxProps> = ({\n  dataIndex,\n  checked,\n  onCheck,\n}) => <Checkbox key={dataIndex} checked={checked} onChange={onCheck} />;\n\nexport { TableCellCheckbox };\n\nexport type { TableCellCheckboxProps };\n","import * as React from 'react';\n\ninterface TableCellColorPreviewProps {\n  color: string;\n}\n\nconst TableCellColorPreview: React.FC<TableCellColorPreviewProps> = ({\n  color,\n}) => (\n  <div\n    key={color}\n    style={{\n      backgroundColor: color,\n      width: 16,\n      height: 16,\n      borderRadius: 2,\n    }}\n  />\n);\n\nexport { TableCellColorPreview };\n\nexport type { TableCellColorPreviewProps };\n","import Select from 'antd/es/select';\nimport * as React from 'react';\n\ninterface SelectOption {\n  label: string;\n  value: string | number;\n}\n\ninterface TableCellSelectProps {\n  data: SelectOption[];\n}\n\nconst TableCellSelect: React.FC<TableCellSelectProps> = ({\n  data,\n  ...otherProps\n}) => {\n  const options = data.map(({ label, value }) => (\n    <Select.Option key={value} value={value}>\n      {label}\n    </Select.Option>\n  ));\n\n  return <Select {...otherProps}>{options}</Select>;\n};\n\nexport { TableCellSelect };\n\nexport type { TableCellSelectProps };\n"],"sourceRoot":""}