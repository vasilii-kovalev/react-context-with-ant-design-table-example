{"version":3,"sources":["context/users-table.tsx","context/colors-table.tsx","reportWebVitals.ts","app.tsx","index.tsx","context/table.tsx"],"names":["UsersTableContext","React","defaultContextState","displayName","UsersTableProvider","tableProviderCreator","useUsersTable","tableHookCreator","ColorsTableContext","ColorsTableProvider","useColorsTable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MainPage","AssociationsPage","queryConfig","queries","useErrorBoundary","refetchOnWindowFocus","App","config","basename","process","fallback","exact","path","initialIsOpen","ReactDOM","render","document","getElementById","actionTypes","defaultInitialValue","checkedKeys","state","dispatch","defaultReducer","action","type","checkedKey","includes","filter","key","concat","Error","Context","initialValue","reducer","children","value","Provider","hookName","providerName","tableState","undefined","toggleCheckedKey"],"mappings":"iLAAA,sFASMA,EAAoBC,gBACxBC,KAEFF,EAAkBG,YAAc,oBAEhC,IAAMC,EAAmDC,YACvDL,GAEFI,EAAmBD,YAAc,qBAEjC,IAAMG,EAAgBC,YACpBP,EACA,gBACA,sB,gCCtBF,sFASMQ,EAAqBP,gBACzBC,KAEFM,EAAmBL,YAAc,qBAEjC,IAAMM,EAAoDJ,YACxDG,GAEFC,EAAoBN,YAAc,sBAElC,IAAMO,EAAiBH,YACrBC,EACA,iBACA,wB,0ECRaG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+CCFRQ,EAAWnB,QAAW,kBAAM,+DAC5BoB,EAAmBpB,QAAW,kBAAM,+DAEpCqB,EAAgC,CACpCC,QAAS,CACPC,kBAAkB,EAClBC,sBAAsB,IAIpBC,EAAM,WACV,OACE,qCACE,cAAC,IAAD,CAA0BC,OAAQL,EAAlC,SACE,cAAC,IAAD,CAAQM,SAAUC,+CAAlB,SACE,cAAC,WAAD,CAAgBC,SAAU,KAA1B,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAACZ,EAAD,MAEF,cAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,gBAAlB,SACE,cAACX,EAAD,mBAQd,cAAC,qBAAD,CAAoBY,eAAe,Q,MChCzCC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B1B,K,gNCRM2B,EACc,qBA0BdC,EAAkC,CACtCC,YAAa,IAGTtC,EAAoC,CACxCuC,MAAOF,EACPG,SAAU,cAGNC,EAA+B,SAACF,EAAOG,GAC3C,OAAQA,EAAOC,MACb,KAAKP,EAA+B,IAC1BQ,EAAeF,EAAfE,WACAN,EAAgBC,EAAhBD,YAER,OAAIA,EAAYO,SAASD,GAChB,2BACFL,GADL,IAEED,YAAaA,EAAYQ,QAAO,SAAAC,GAAG,OAAIA,IAAQH,OAI5C,2BACFL,GADL,IAEED,YAAaA,EAAYU,OAAOJ,KAIpC,QACE,MAAM,IAAIK,MAAJ,+BAAkCP,EAAOC,SAK/CxC,EAAuB,SAAC+C,GAmB5B,OAlBoD,SAAC,GAI9C,IAAD,IAHJC,oBAGI,MAHWd,EAGX,MAFJe,eAEI,MAFMX,EAEN,EADJY,EACI,EADJA,SACI,EACsBtD,aAAiBqD,EAASD,GADhD,mBACGZ,EADH,KACUC,EADV,KAGEc,EAAQvD,WACZ,iBAAO,CACLwC,QACAC,cAEF,CAACD,EAAOC,IAGV,OAAO,cAACU,EAAQK,SAAT,CAAkBD,MAAOA,EAAzB,SAAiCD,MAMtChD,EAAmB,SACvB6C,EACAM,EACAC,GAoBA,OAAO,eACJD,GADI,WAEH,IAAME,EAAa3D,aAAiBmD,GAEpC,QAAmBS,IAAfD,EACF,MAAM,IAAIT,MAAJ,UAAaO,EAAb,gCAA6CC,IAGrD,OAAOC,KAETF,IAGEI,EAAmB,SAACpB,EAA0BI,GAA3B,OACvBJ,EAAS,CAAEG,KAAMP,EAA8BQ,kB","file":"static/js/main.4c52d61d.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  ContextState,\n  defaultContextState,\n  tableHookCreator,\n  tableProviderCreator,\n  TableProviderProps,\n} from './table';\n\nconst UsersTableContext = React.createContext<ContextState>(\n  defaultContextState\n);\nUsersTableContext.displayName = 'UsersTableContext';\n\nconst UsersTableProvider: React.FC<TableProviderProps> = tableProviderCreator(\n  UsersTableContext\n);\nUsersTableProvider.displayName = 'UsersTableProvider';\n\nconst useUsersTable = tableHookCreator(\n  UsersTableContext,\n  'useUsersTable',\n  'UsersTableContext'\n);\n\nexport { UsersTableProvider, useUsersTable };\n","import * as React from 'react';\nimport {\n  ContextState,\n  defaultContextState,\n  tableHookCreator,\n  tableProviderCreator,\n  TableProviderProps,\n} from './table';\n\nconst ColorsTableContext = React.createContext<ContextState>(\n  defaultContextState\n);\nColorsTableContext.displayName = 'ColorsTableContext';\n\nconst ColorsTableProvider: React.FC<TableProviderProps> = tableProviderCreator(\n  ColorsTableContext\n);\nColorsTableProvider.displayName = 'ColorsTableProvider';\n\nconst useColorsTable = tableHookCreator(\n  ColorsTableContext,\n  'useColorsTable',\n  'ColorsTableProvider'\n);\n\nexport { ColorsTableProvider, useColorsTable };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ReactQueryConfigProvider, ReactQueryConfig } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query-devtools';\nimport { UsersTableProvider } from './context/users-table';\nimport { ColorsTableProvider } from './context/colors-table';\n\nconst MainPage = React.lazy(() => import('./pages/main'));\nconst AssociationsPage = React.lazy(() => import('./pages/associations'));\n\nconst queryConfig: ReactQueryConfig = {\n  queries: {\n    useErrorBoundary: true,\n    refetchOnWindowFocus: false,\n  },\n};\n\nconst App = () => {\n  return (\n    <>\n      <ReactQueryConfigProvider config={queryConfig}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <React.Suspense fallback={null}>\n            <Switch>\n              <UsersTableProvider>\n                <ColorsTableProvider>\n                  <Route exact path=\"/\">\n                    <MainPage />\n                  </Route>\n                  <Route exact path=\"/associations\">\n                    <AssociationsPage />\n                  </Route>\n                </ColorsTableProvider>\n              </UsersTableProvider>\n            </Switch>\n          </React.Suspense>\n        </Router>\n      </ReactQueryConfigProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n};\n\nexport { App };\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './app';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as React from 'react';\n\ntype CheckedKey = string;\n\ninterface TableState {\n  checkedKeys: CheckedKey[];\n}\n\nconst actionTypes = {\n  toggleCheckedKey: 'TOGGLE_CHECKED_KEY',\n} as const;\n\ninterface ToggleCheckedKey {\n  type: typeof actionTypes.toggleCheckedKey;\n  checkedKey: CheckedKey;\n}\n\ntype TableAction = ToggleCheckedKey;\n\ntype TablesDispatch = React.Dispatch<TableAction>;\n\ntype TableReducer = React.Reducer<TableState, TableAction>;\n\ninterface ContextState {\n  state: TableState;\n  dispatch: React.Dispatch<TableAction>;\n}\n\ntype TableContext = React.Context<ContextState>;\n\ninterface TableProviderProps {\n  initialValue?: TableState;\n  reducer?: TableReducer;\n}\n\nconst defaultInitialValue: TableState = {\n  checkedKeys: [],\n};\n\nconst defaultContextState: ContextState = {\n  state: defaultInitialValue,\n  dispatch: () => {},\n};\n\nconst defaultReducer: TableReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.toggleCheckedKey: {\n      const { checkedKey } = action;\n      const { checkedKeys } = state;\n\n      if (checkedKeys.includes(checkedKey)) {\n        return {\n          ...state,\n          checkedKeys: checkedKeys.filter(key => key !== checkedKey),\n        };\n      }\n\n      return {\n        ...state,\n        checkedKeys: checkedKeys.concat(checkedKey),\n      };\n    }\n\n    default: {\n      throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n};\n\nconst tableProviderCreator = (Context: TableContext) => {\n  const TableProvider: React.FC<TableProviderProps> = ({\n    initialValue = defaultInitialValue,\n    reducer = defaultReducer,\n    children,\n  }) => {\n    const [state, dispatch] = React.useReducer(reducer, initialValue);\n\n    const value = React.useMemo(\n      () => ({\n        state,\n        dispatch,\n      }),\n      [state, dispatch]\n    );\n\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  };\n\n  return TableProvider;\n};\n\nconst tableHookCreator = (\n  Context: TableContext,\n  hookName: string,\n  providerName: string\n) => {\n  /*\n    It is not possible to create a function and then change its name,\n    because it's read-only. With this hack hooks' names will look like this:\n    * UsersTable\n    * ColorsTable\n\n    instead of:\n    * Table\n    * Table\n\n    Also React.useDebug value can be used, but it places the given value AFTER\n    a hook's name like this:\n    * Table: \"useUsersTable\"\n    * Table: \"useColorsTable\"\n    which is not I wanted.\n\n    Inspired by: https://stackoverflow.com/a/41854075/11293963\n  */\n  return {\n    [hookName]() {\n      const tableState = React.useContext(Context);\n\n      if (tableState === undefined) {\n        throw new Error(`${hookName} must be used within ${providerName}`);\n      }\n\n      return tableState;\n    },\n  }[hookName];\n};\n\nconst toggleCheckedKey = (dispatch: TablesDispatch, checkedKey: CheckedKey) =>\n  dispatch({ type: actionTypes.toggleCheckedKey, checkedKey });\n\nexport {\n  defaultContextState,\n  tableHookCreator,\n  tableProviderCreator,\n  toggleCheckedKey,\n};\n\nexport type { TableProviderProps, ContextState };\n"],"sourceRoot":""}